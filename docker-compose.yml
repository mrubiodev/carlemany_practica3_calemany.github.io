version: '3.8'

services:
  app:
    build: ./frontend
    container_name: web_app
    ports:
      - "${APP_PORT}:80"
    depends_on:
      - db
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    volumes:
      - .:/usr/src/app
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: mysql_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

#  backend: #Me equivoque pense que se podia hacer una estructura api-rest donde flask era la api-rest y php hacia la peticiones
#   build: ./backend
#   container_name: flask_backend
#   ports:
#     - "${BACKEND_PORT}:80"
#     depends_on:
#      - db
#     environment:
#       - DB_HOST=${DB_HOST}
#       - DB_USER=${DB_USER}
#       - DB_PASSWORD=${DB_PASSWORD}
#       - DB_NAME=${DB_NAME}
#     networks:
#       - app-network

  php:
    build: ./backend_php
    container_name: php_backend
    ports:
      - "${APP_PORT_PHP}:80"
    depends_on:
      - db
    environment:
      - DB_HOST=${DB_HOST}
      - DB_USER=root
      - DB_PASSWORD=my-secret-pw
      - DB_NAME=app_db
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: always
    ports:
      - "${PHPMYADMIN_PORT}:80"
    environment:
      PMA_HOST: ${DB_HOST}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - db
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data: